<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-01T17:34:50+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Deep Code Dive</title><subtitle>Performance, Kernel programming, hacking and debugging.</subtitle><entry><title type="html">Traversing My Learning Curve!</title><link href="http://localhost:4000/index/2018/12/31/traversing_my_learning_curve.html" rel="alternate" type="text/html" title="Traversing My Learning Curve!" /><published>2018-12-31T21:26:36+05:30</published><updated>2018-12-31T21:26:36+05:30</updated><id>http://localhost:4000/index/2018/12/31/traversing_my_learning_curve</id><content type="html" xml:base="http://localhost:4000/index/2018/12/31/traversing_my_learning_curve.html">&lt;h3 id=&quot;topic-to-understand&quot;&gt;Topic to understand&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Linux Kernel compilation&lt;/li&gt;
  &lt;li&gt;Building compiler toolchain.&lt;a href=&quot;https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/&quot; target=&quot;_blank&quot;&gt;Manual way&lt;/a&gt;, &lt;a href=&quot;https://crosstool-ng.github.io/&quot; target=&quot;_blank&quot;&gt;crosstool-ng&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cross compiling kernel&lt;/li&gt;
  &lt;li&gt;Building own gcc compiler.&lt;/li&gt;
  &lt;li&gt;Building cross  compiler for ARM64 and PowerPC targets&lt;/li&gt;
  &lt;li&gt;Mastering git&lt;/li&gt;
  &lt;li&gt;Using qemu (console based) for fun
    &lt;ul&gt;
      &lt;li&gt;Creating VM for x86_64, arm64, ppc64, etc.&lt;/li&gt;
      &lt;li&gt;Creating network devices&lt;/li&gt;
      &lt;li&gt;ftp, smba folder mounting from host to guest os&lt;/li&gt;
      &lt;li&gt;9p file system&lt;/li&gt;
      &lt;li&gt;virtual bridging&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using gnu debugger(GDB)&lt;/li&gt;
  &lt;li&gt;Using qemu to debug kernel&lt;/li&gt;
  &lt;li&gt;Mastering bash shell and shell scripts.&lt;/li&gt;
  &lt;li&gt;ssh reverse tunneling&lt;/li&gt;
  &lt;li&gt;Writing device drivers&lt;/li&gt;
  &lt;li&gt;Writing custom JIT compilers &lt;a href=&quot;http://blog.reverberate.org/2012/12/hello-jit-world-joy-of-simple-jits.html_&quot; target=&quot;_blank&quot;&gt;Hello World&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Writing custom malloc function(independent of glibc) &lt;a href=&quot;https://github.com/parthsl/tools/tree/master/Memory_allocator&quot; target=&quot;_blank&quot;&gt;URL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Workload tuning
    &lt;ul&gt;
      &lt;li&gt;TLB cache optimization&lt;/li&gt;
      &lt;li&gt;Hugepages&lt;/li&gt;
      &lt;li&gt;Hyper threading tuning&lt;/li&gt;
      &lt;li&gt;Vectorization(AVX-512 and Altivec)&lt;/li&gt;
      &lt;li&gt;Scaling across multi-cores and many-cores&lt;/li&gt;
      &lt;li&gt;GPU offloading&lt;/li&gt;
      &lt;li&gt;MPI+OpenMP tuning for multi-processing with multi-threading for ditributed multi-core processing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Performance debugging and tracing
    &lt;ul&gt;
      &lt;li&gt;perf tool&lt;/li&gt;
      &lt;li&gt;ftrace&lt;/li&gt;
      &lt;li&gt;kdump&lt;/li&gt;
      &lt;li&gt;voltron gdb&lt;/li&gt;
      &lt;li&gt;Berkely packet filter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Custom initrd file creation
    &lt;ul&gt;
      &lt;li&gt;Compiling for native system as well as for cross-comilation&lt;/li&gt;
      &lt;li&gt;Writing own boot firmware for x86 systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kernel scheduler optimization
    &lt;ul&gt;
      &lt;li&gt;Performance optimization&lt;/li&gt;
      &lt;li&gt;throughput and latency oriented by fair scheduling&lt;/li&gt;
      &lt;li&gt;energy impact due to scheduler&lt;/li&gt;
      &lt;li&gt;CPUFREQ(P-States) and CPUIDLE(C-states)&lt;/li&gt;
      &lt;li&gt;task packing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pandaboard based omap4 booting
    &lt;ul&gt;
      &lt;li&gt;Booting debian os on omap4 board&lt;/li&gt;
      &lt;li&gt;kernel compilation&lt;/li&gt;
      &lt;li&gt;manually kernel installation and booting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand several benchmarks &lt;a href=&quot;https://github.com/parthsl/tools/tree/master/benchmarks&quot; target=&quot;_blank&quot;&gt;URL&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;stream triad : For L1,L2 and LLC cache size&lt;/li&gt;
      &lt;li&gt;stress-ng : Swiss knife of many benchmarks&lt;/li&gt;
      &lt;li&gt;TSPLIB : NP-Hard TSP based dataset&lt;/li&gt;
      &lt;li&gt;rt-app : Configurable AOSP based workload generator&lt;/li&gt;
      &lt;li&gt;redis : In-memory single thread database benchmark&lt;/li&gt;
      &lt;li&gt;YCSB : PLugin based database benchmarking system&lt;/li&gt;
      &lt;li&gt;SPEC : int and float based benchmark suite(2006 and 2017 versions)&lt;/li&gt;
      &lt;li&gt;schbench and hackbench : scheduler wakeup latency benchmarking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lock Optimization
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://lucteo.ro/2018/11/18/look-ma-no-locks/&quot; target=&quot;_blank&quot;&gt;No lock ds&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chip Energy Measurement
    &lt;ul&gt;
      &lt;li&gt;[CPU Energy Meter] (https://github.com/parthsl/tools/tree/master/cpu-energy-meter){:target=”_blank”}&lt;/li&gt;
      &lt;li&gt;[Intel specific] (https://github.com/parthsl/tools/tree/master/RAPL_Energy_measurement){:target=”_blank”}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;stay-tuned-for-more-info-on-each-topic&quot;&gt;Stay tuned for more info on each topic!!!!&lt;/h4&gt;

&lt;h4 id=&quot;you-can-google-out-this-topic-for-better-understanding-if-you-are-eager-to-learn-fast&quot;&gt;You can google out this topic for better understanding if you are eager to learn fast.&lt;/h4&gt;</content><author><name></name></author><summary type="html">Topic to understand Linux Kernel compilation Building compiler toolchain.Manual way, crosstool-ng Cross compiling kernel Building own gcc compiler. Building cross compiler for ARM64 and PowerPC targets Mastering git Using qemu (console based) for fun Creating VM for x86_64, arm64, ppc64, etc. Creating network devices ftp, smba folder mounting from host to guest os 9p file system virtual bridging Using gnu debugger(GDB) Using qemu to debug kernel Mastering bash shell and shell scripts. ssh reverse tunneling Writing device drivers Writing custom JIT compilers Hello World Writing custom malloc function(independent of glibc) URL Workload tuning TLB cache optimization Hugepages Hyper threading tuning Vectorization(AVX-512 and Altivec) Scaling across multi-cores and many-cores GPU offloading MPI+OpenMP tuning for multi-processing with multi-threading for ditributed multi-core processing Performance debugging and tracing perf tool ftrace kdump voltron gdb Berkely packet filter Custom initrd file creation Compiling for native system as well as for cross-comilation Writing own boot firmware for x86 systems kernel scheduler optimization Performance optimization throughput and latency oriented by fair scheduling energy impact due to scheduler CPUFREQ(P-States) and CPUIDLE(C-states) task packing Pandaboard based omap4 booting Booting debian os on omap4 board kernel compilation manually kernel installation and booting Understand several benchmarks URL stream triad : For L1,L2 and LLC cache size stress-ng : Swiss knife of many benchmarks TSPLIB : NP-Hard TSP based dataset rt-app : Configurable AOSP based workload generator redis : In-memory single thread database benchmark YCSB : PLugin based database benchmarking system SPEC : int and float based benchmark suite(2006 and 2017 versions) schbench and hackbench : scheduler wakeup latency benchmarking Lock Optimization No lock ds Chip Energy Measurement [CPU Energy Meter] (https://github.com/parthsl/tools/tree/master/cpu-energy-meter){:target=”_blank”} [Intel specific] (https://github.com/parthsl/tools/tree/master/RAPL_Energy_measurement){:target=”_blank”}</summary></entry><entry><title type="html">Building Custom Linux Kernel!</title><link href="http://localhost:4000/kernel/2018/12/27/building_custom_linux_kernel.html" rel="alternate" type="text/html" title="Building Custom Linux Kernel!" /><published>2018-12-27T20:06:36+05:30</published><updated>2018-12-27T20:06:36+05:30</updated><id>http://localhost:4000/kernel/2018/12/27/building_custom_linux_kernel</id><content type="html" xml:base="http://localhost:4000/kernel/2018/12/27/building_custom_linux_kernel.html">&lt;p&gt;Linux kernel is a nice piece of collaborative work developed by thousands of developers across the world. Hence it always feels proud to get our hands dirty with such art.&lt;/p&gt;

&lt;p&gt;This post gives a begineer’s guide to how to compile the kernel in your system for the first time and install it.&lt;/p&gt;

&lt;h4 id=&quot;get-the-kernel-sources&quot;&gt;Get the kernel sources&lt;/h4&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://www.github.com/torvalds/linux.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;build-the-dependencies&quot;&gt;Build the dependencies&lt;/h4&gt;
&lt;p&gt;Install packages for compiler, curses, flex, bison, etc based on your linux distro&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf/yum&lt;/code&gt; based distro
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bison automake autoconf flex ncurses-devel elfutils-libelf-devel make gcc elfutils-devel libunwind-devel xz-devel numactl-devel openssl-devel binutils-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; based distro
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;flex libncurses5 elfutils openssl libssl-dev automake bison pkg-config libncurses5-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configure-kernel&quot;&gt;Configure kernel&lt;/h4&gt;
&lt;p&gt;Generally linux kernel has thousands of parameters and modules to be configured based on the system architecture.&lt;/p&gt;

&lt;p&gt;Linux kernel  maintains &lt;code class=&quot;highlighter-rouge&quot;&gt;.config&lt;/code&gt; file in root folder of kernel source tree. One can use any editor to configure the file but the curses based builtin tool makes it easy to change any configurations.&lt;/p&gt;

&lt;p&gt;For begginer’s one can get default config file for x86_64 platform by below command, while for other architectures like PowerPC,MIPS,arm64,etc. look thorugh &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/&amp;lt;architecture name&amp;gt;/configs/&lt;/code&gt; folder to find proper name.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make x86_64_defconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To traverse through the config file, just use &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; command to fire up curses based window for easier navigation.&lt;/p&gt;

&lt;h4 id=&quot;compile-kernel&quot;&gt;Compile kernel&lt;/h4&gt;
&lt;p&gt;Compiling of kernel goes through compilation of several files which may take time in several minutes to hours in typical desktop systems. The make with &lt;code class=&quot;highlighter-rouge&quot;&gt;-j&amp;lt;nr_threads&amp;gt;&lt;/code&gt; arguments helps out here by parallel building. &lt;code class=&quot;highlighter-rouge&quot;&gt;nproc&lt;/code&gt; total CPUs in the system here.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once compiled succesfully, the output is a &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; file in the root directory which is basically the kernel.&lt;/p&gt;

&lt;h4 id=&quot;installing-kernel&quot;&gt;Installing kernel&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kernel built vmlinux is the file which gets executed firstly after system boot, hence it cannot depend on any other code or library as it itself has the loader and linker. For this reason, the vmlinux file is statically build. The kernel installation gets done in three parts: installation of vmlinux, kernel modules and initrd image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The vmlinux needs to copied at &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; partition along with its &lt;code class=&quot;highlighter-rouge&quot;&gt;System.map&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.config&lt;/code&gt; file as optional things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;vmlinux&lt;/code&gt; contains module codes, which means it has capability to add some code to itself after it gets executed. This modules are basically drivers, energy governors, etc.  which needs to be added along ith the kernel. This can be invoked by &lt;code class=&quot;highlighter-rouge&quot;&gt;make modules_install&lt;/code&gt; which will compile relevant modules configured using &lt;code class=&quot;highlighter-rouge&quot;&gt;.config&lt;/code&gt; file and install it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/modules/&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The system boot sequence is as follows:
    &lt;ol&gt;
      &lt;li&gt;The power on button invokes the system firmware/BIOS which in turn powers on motherboard components including disks.&lt;/li&gt;
      &lt;li&gt;The control is then passed on to the boot loader like GRUB/LILO seating in /boot partition of the disk. It is the one which provides options to select a kernel to be loaded.&lt;/li&gt;
      &lt;li&gt;The boot loader then invokes the initrd image which does mounting of several disk paritions like &lt;code class=&quot;highlighter-rouge&quot;&gt;/root&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt;/, &lt;code class=&quot;highlighter-rouge&quot;&gt;/swap&lt;/code&gt;, etc. and boots vmlinux from there in.
The initrd thus has to be generated using &lt;code class=&quot;highlighter-rouge&quot;&gt;mkinitrd&lt;/code&gt; command and boot loader has to be updated for the new kernel addition.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The Makefile does all the above three steps and updates the boot loader using below command
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Manual method&lt;/strong&gt;
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make modules_install &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nproc&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Get kernel-version-name from &lt;code class=&quot;highlighter-rouge&quot;&gt;/include/config/kernel.release&lt;/code&gt; file.&lt;/p&gt;
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkinitramfs &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; initramfs-&amp;lt;kernel-version-name&amp;gt;.img &amp;lt;kernel-version-name&amp;gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;initramfs--&amp;lt;kernel-version-name&amp;gt;.img /boot
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; .config /boot/config--&amp;lt;kernel-version-name&amp;gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;System.map /boot/System.map--&amp;lt;kernel-version-name&amp;gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;vmlinux /boot/vmlinuz--&amp;lt;kernel-version-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;booting-new-kernel&quot;&gt;Booting new kernel&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If succesfully installed the new kernel, then one can reboot the system and find the kernel with its version installed in boot loader. Just select that kernel to start the system with your new kernel.
After system start one can use &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -a&lt;/code&gt; to find the current kernel info.&lt;/li&gt;
  &lt;li&gt;Other way to start the new kernel is to build custom initrd from above manual steps and invoke below command
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kexec ./vmlinux &lt;span class=&quot;s2&quot;&gt;&quot;./initrd.img&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/cmdline&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The advantage of above kexec command is that it will load the new kernel without rebooting the system. Also even with just modul installation step only one can test this kernel without updating boot loader or &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; partition.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Linux kernel is a nice piece of collaborative work developed by thousands of developers across the world. Hence it always feels proud to get our hands dirty with such art.</summary></entry></feed>